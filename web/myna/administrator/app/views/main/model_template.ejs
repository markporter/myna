Ext.define('<%=$params.cls%>.model.<%=modelName%>', {
	extend: 'Ext.data.Model',
	fields:[
	<@loop array="model.fieldNames" element="name" index="i">
		<% var field= model.getField(name); %>
		{
			name:<%=JSON.stringify(field.name)%>,
			label:<%=JSON.stringify(field.label)%>,
			jsType:<%=JSON.stringify(field.type)%>
			<@if field.defaultValue || field.defaultValue === 0.0>
			,defaultValue:<%=JSON.stringify(field.defaultValue)%>
			</@if>
			<@if field.type == "date">
			,convert:function(val){
				if (!(/\/Date\(\d+\)\//).test(val)) return val
				return new Date(parseInt(val.match(/Date\((\d+)\)/)[1]));
			}
			</@if>
		}<@if i < model.fieldNames.length-1>,</@if>
	</@loop>
	], 
	idProperty:'<%=model.idField%>',
	getLabel:function (col){
		if (this.fields.get(col) && this.fields.get(col).label){
			return this.fields.get(col).label
		} else { 
			return this.genLabel(col)
		}
	},
	genLabel:function(colname){
		if(!colname) return colname
		var sr={
			id:"ID"	
		}
		if (colname in sr) return sr[colname]
		return colname.split(/_/).map(function(part){
			if ($O(sr).getKeys().indexOf(part) >-1) return sr[part]
			return part.titleCap()
		}).join(" ")
	},
	proxy:{
		type:"direct",
		paramsAsHash:true,
		api:{
			create:$FP.<%=modelName%>.save,
			read:$FP.<%=modelName%>.get,
			update:$FP.<%=modelName%>.save,
			destroy:$FP.<%=modelName%>.remove,
		},
		reader: {
			type: 'json',
			idProperty:'<%=model.idField%>'
		}
	},
	//override default validator 
	validate:function(){
		var errors  = Ext.create('Ext.data.Errors')
		var vr = this.validation.validate(this.data)
		$O(vr.errors).forEach(function(message,field){
			errors.add({
				field: field,
				message: message
			})
		})
		return errors;
	},
	validation:<%=model.validation.toCode()%>
	
});
Ext.define('<%=$params.cls%>.store.<%=modelName%>', {
	extend: 'Ext.data.Store',
	alias: 'store.<%=modelName.toLowerCase()%>',
	requires: ['Ext.data.proxy.Direct'],
	
	constructor : function(config){
		config = Ext.apply({}, config);
		if (!config.proxy) {
			var proxy = {
				type: 'direct',
				directFn:$FP.<%=modelName%>.list,
				
				paramsAsHash:true,
				reader: {
					type: 'json',
					totalProperty:'totalRows',
					root:'data',
					idProperty:'<%=model.idField%>'
				}
			};
			
			config.proxy = proxy;
			config.model=<%=$params.cls%>.model.<%=modelName%>;
			
		}
		this.callParent([config]);
	}	
});